/*
Copyright 2023- IBM Inc. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package collector

import (
	"crypto/tls"
	"encoding/json"
	"io"
	"net/http"
)

func collectResourceList[A any](server serverData, resourceQuery string, resouceList *[]*A) error {
	bytes, err := curlReq(server, resourceQuery)
	if err != nil {
		return err
	}
	*resouceList, err = unmarshalToList[A](bytes)
	if err != nil {
		return err
	}
	return nil
}

func unmarshalToList[A any](b []byte) ([]*A, error) {
	data := struct{ Results []*A }{}
	err := json.Unmarshal(b, &data)
	if err != nil {
		return nil, err
	}
	return data.Results, nil
}

func curlReq(server serverData, query string) ([]byte, error) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	//nolint:gosec // need insecure TLS option for testing and development
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}

	//nolint:noctx // no context for testing and development
	req, err := http.NewRequest(http.MethodGet, server.nsxServer+"/"+query, http.NoBody)
	if err != nil {
		return nil, err
	}
	req.SetBasicAuth(server.userName, server.password)

	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	bytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	return bytes, nil
}
