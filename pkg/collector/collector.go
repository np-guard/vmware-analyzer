/*
Copyright 2023- IBM Inc. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package collector

import (
	"crypto/tls"
	"encoding/json"
	"io"
	"net/http"
)

func CollectResources(NSXServer, user_name, password string) (*ResourcesContainerModel, error) {
	res := NewResourcesContainerModel()
	err := collectResourceList(NSXServer, user_name, password, "api/v1/fabric/virtual-machines", &res.VirtualMachineList)
	if err != nil {
		return nil, err
	}
	err = collectResourceList(NSXServer, user_name, password, "policy/api/v1/infra/domains/default/security-policies", &res.SecurityPolicyList)
	if err != nil {
		return nil, err
	}
	return res, nil
}


func collectResourceList[A any](NSXServer, user_name, password, resource_key string, resouceList *[]*A) error {
	b, err := curlReq(NSXServer, user_name, password, resource_key)
	if err != nil {
		return err
	}
	*resouceList, err = UnmarshalToList[A](b)
	if err != nil {
		return err
	}
	return nil
}

func UnmarshalToList[A any](b []byte) ([]*A, error) {
	data := struct{ Results []*A }{}
	err := json.Unmarshal(b, &data)
	if err != nil {
		return nil, err
	}
	return data.Results, nil
}

func curlReq(NSXServer, user_name, password, key string) ([]byte, error) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}

	req, err := http.NewRequest("GET", NSXServer+"/"+key, nil)
	if err != nil {
		return nil, err
	}
	req.SetBasicAuth(user_name, password)

	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	return body, nil
}
