/*
Copyright 2023- IBM Inc. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package collector

import (
	"crypto/tls"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
)

const (
	virtualMachineQuary = "api/v1/fabric/virtual-machines"
	securityPolicyQuary = "policy/api/v1/infra/domains/%s/security-policies"
	domainsQuary        = "policy/api/v1/infra/domains"
)

type serverData struct {
	NSXServer, user_name, password string
}

func CollectResources(NSXServer, user_name, password string) (*ResourcesContainerModel, error) {
	server := serverData{NSXServer, user_name, password}
	res := NewResourcesContainerModel()
	err := collectResourceList(server, virtualMachineQuary, &res.VirtualMachineList)
	if err != nil {
		return nil, err
	}
	domain, err := getDomain(server)
	if err != nil {
		return nil, err
	}
	err = collectResourceList(server, fmt.Sprintf(securityPolicyQuary, domain), &res.SecurityPolicyList)
	if err != nil {
		return nil, err
	}
	return res, nil
}

func getDomain(server serverData) (string, error) {
	type domain struct {
		Id string
	}
	domains := []*domain{}
	err := collectResourceList(server, domainsQuary, &domains)
	if err != nil {
		return "", err
	}
	if len(domains) == 0 {
		return "", fmt.Errorf("failed to find domain")
	}
	if len(domains) > 1 {
		return "", fmt.Errorf("multplied domains are not supported")
	}
	return domains[0].Id, nil
}

func collectResourceList[A any](server serverData, resourceQuary string, resouceList *[]*A) error {
	bytes, err := curlReq(server, resourceQuary)
	if err != nil {
		return err
	}
	*resouceList, err = unmarshalToList[A](bytes)
	if err != nil {
		return err
	}
	return nil
}

func unmarshalToList[A any](b []byte) ([]*A, error) {
	data := struct{ Results []*A }{}
	err := json.Unmarshal(b, &data)
	if err != nil {
		return nil, err
	}
	return data.Results, nil
}

func curlReq(server serverData, quary string) ([]byte, error) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}

	req, err := http.NewRequest("GET", server.NSXServer+"/"+quary, nil)
	if err != nil {
		return nil, err
	}
	req.SetBasicAuth(server.user_name, server.password)

	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	bytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	return bytes, nil
}
