apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: Network Policy To Allow Access To DNS Server
        nsx-id: none
    creationTimestamp: null
    name: dns-policy
    namespace: default
spec:
    egress:
        - ports:
            - port: 53
              protocol: UDP
          to:
            - namespaceSelector: {}
              podSelector:
                matchLabels:
                    k8s-app: kube-dns
    podSelector: {}
    policyTypes:
        - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: 'src: (segment seg_2-3 and not in segment seg_1) dst: (IP addr in 0.0.0.0/0) conn: All Connections'
        nsx-id: "1005"
    creationTimestamp: null
    name: policy-1
    namespace: default
spec:
    egress:
        - to:
            - ipBlock:
                cidr: 0.0.0.0/0
            - podSelector: {}
    podSelector:
        matchExpressions:
            - key: in_Segment__seg_2-3
              operator: Exists
            - key: in_Segment__seg_1
              operator: DoesNotExist
    policyTypes:
        - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: 'src: (segment seg_2-3 and not in segment seg_1) dst: (IP addr in 0.0.0.0/0) conn: All Connections'
        nsx-id: "1005"
    creationTimestamp: null
    name: policy-2
    namespace: default
spec:
    ingress:
        - from:
            - podSelector:
                matchExpressions:
                    - key: in_Segment__seg_2-3
                      operator: Exists
                    - key: in_Segment__seg_1
                      operator: DoesNotExist
    podSelector: {}
    policyTypes:
        - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: 'src: (segment seg-6-7 and not in segment seg_4-5) dst: (IP addr in 0.0.0.0/0) conn: All Connections'
        nsx-id: "1007"
    creationTimestamp: null
    name: policy-3
    namespace: default
spec:
    egress:
        - to:
            - ipBlock:
                cidr: 0.0.0.0/0
            - podSelector: {}
    podSelector:
        matchExpressions:
            - key: in_Segment__seg-6-7
              operator: Exists
            - key: in_Segment__seg_4-5
              operator: DoesNotExist
    policyTypes:
        - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: 'src: (segment seg-6-7 and not in segment seg_4-5) dst: (IP addr in 0.0.0.0/0) conn: All Connections'
        nsx-id: "1007"
    creationTimestamp: null
    name: policy-4
    namespace: default
spec:
    ingress:
        - from:
            - podSelector:
                matchExpressions:
                    - key: in_Segment__seg-6-7
                      operator: Exists
                    - key: in_Segment__seg_4-5
                      operator: DoesNotExist
    podSelector: {}
    policyTypes:
        - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: 'src: (segment seg-8) dst: (group != real-group) conn: All Connections'
        nsx-id: "2200"
    creationTimestamp: null
    name: policy-5
    namespace: default
spec:
    egress:
        - to:
            - podSelector:
                matchExpressions:
                    - key: group__real-group
                      operator: DoesNotExist
    podSelector:
        matchExpressions:
            - key: in_Segment__seg-8
              operator: Exists
    policyTypes:
        - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: 'src: (segment seg-8) dst: (IP addr is external) conn: All Connections'
        nsx-id: "2200"
    creationTimestamp: null
    name: policy-6
    namespace: default
spec:
    egress:
        - to:
            - ipBlock:
                cidr: 0.0.0.0/0
            - podSelector: {}
    podSelector:
        matchExpressions:
            - key: in_Segment__seg-8
              operator: Exists
    policyTypes:
        - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: 'src: (segment seg-8) dst: (group != real-group) conn: All Connections'
        nsx-id: "2200"
    creationTimestamp: null
    name: policy-7
    namespace: default
spec:
    ingress:
        - from:
            - podSelector:
                matchExpressions:
                    - key: in_Segment__seg-8
                      operator: Exists
    podSelector:
        matchExpressions:
            - key: group__real-group
              operator: DoesNotExist
    policyTypes:
        - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: 'src: (segment seg-9-10) dst: (IP addr in 0.0.0.0/0) conn: All Connections'
        nsx-id: "3000"
    creationTimestamp: null
    name: policy-8
    namespace: default
spec:
    egress:
        - to:
            - ipBlock:
                cidr: 0.0.0.0/0
            - podSelector: {}
    podSelector:
        matchExpressions:
            - key: in_Segment__seg-9-10
              operator: Exists
    policyTypes:
        - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: 'src: (segment seg-9-10) dst: (IP addr in 0.0.0.0/0) conn: All Connections'
        nsx-id: "3000"
    creationTimestamp: null
    name: policy-9
    namespace: default
spec:
    ingress:
        - from:
            - podSelector:
                matchExpressions:
                    - key: in_Segment__seg-9-10
                      operator: Exists
    podSelector: {}
    policyTypes:
        - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: 'src: (group = real-group and not in segment seg_4-5 and not in segment seg-8) dst: (group = real-group) conn: All Connections'
        nsx-id: "4008"
    creationTimestamp: null
    name: policy-10
    namespace: default
spec:
    egress:
        - to:
            - podSelector:
                matchExpressions:
                    - key: group__real-group
                      operator: Exists
    podSelector:
        matchExpressions:
            - key: group__real-group
              operator: Exists
            - key: in_Segment__seg_4-5
              operator: DoesNotExist
            - key: in_Segment__seg-8
              operator: DoesNotExist
    policyTypes:
        - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: 'src: (group = real-group and not in segment seg_4-5 and not in segment seg-8) dst: (group = real-group) conn: All Connections'
        nsx-id: "4008"
    creationTimestamp: null
    name: policy-11
    namespace: default
spec:
    ingress:
        - from:
            - podSelector:
                matchExpressions:
                    - key: group__real-group
                      operator: Exists
                    - key: in_Segment__seg_4-5
                      operator: DoesNotExist
                    - key: in_Segment__seg-8
                      operator: DoesNotExist
    podSelector:
        matchExpressions:
            - key: group__real-group
              operator: Exists
    policyTypes:
        - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: Default Deny Network Policy
        nsx-id: "1003"
    creationTimestamp: null
    name: default-deny
    namespace: default
spec:
    podSelector: {}
    policyTypes:
        - Ingress
        - Egress
