apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: Network Policy To Allow Access To DNS Server
        nsx-id: none
    creationTimestamp: null
    name: dns-policy
    namespace: default
spec:
    egress:
        - ports:
            - port: 53
              protocol: UDP
          to:
            - namespaceSelector: {}
              podSelector:
                matchLabels:
                    k8s-app: kube-dns
    podSelector: {}
    policyTypes:
        - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: 'src: (segment seg_2-3 and not in segment seg_1) dst: (IP addr in 0.0.0.0/0) conn: All Connections'
        nsx-id: "1005"
    creationTimestamp: null
    name: policy-1
    namespace: default
spec:
    egress:
        - to:
            - ipBlock:
                cidr: 0.0.0.0/0
            - podSelector: {}
    podSelector:
        matchExpressions:
            - key: in_Segment__seg_2-3
              operator: Exists
            - key: in_Segment__seg_1
              operator: DoesNotExist
    policyTypes:
        - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: 'src: (segment seg_2-3 and not in segment seg_1) dst: (IP addr in 0.0.0.0/0) conn: All Connections'
        nsx-id: "1005"
    creationTimestamp: null
    name: policy-2
    namespace: default
spec:
    ingress:
        - from:
            - podSelector:
                matchExpressions:
                    - key: in_Segment__seg_2-3
                      operator: Exists
                    - key: in_Segment__seg_1
                      operator: DoesNotExist
    podSelector: {}
    policyTypes:
        - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: 'src: (segment seg-6-7 and not in segment seg_4-5) dst: (IP addr in 0.0.0.0/0) conn: All Connections'
        nsx-id: "1007"
    creationTimestamp: null
    name: policy-3
    namespace: default
spec:
    egress:
        - to:
            - ipBlock:
                cidr: 0.0.0.0/0
            - podSelector: {}
    podSelector:
        matchExpressions:
            - key: in_Segment__seg-6-7
              operator: Exists
            - key: in_Segment__seg_4-5
              operator: DoesNotExist
    policyTypes:
        - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: 'src: (segment seg-6-7 and not in segment seg_4-5) dst: (IP addr in 0.0.0.0/0) conn: All Connections'
        nsx-id: "1007"
    creationTimestamp: null
    name: policy-4
    namespace: default
spec:
    ingress:
        - from:
            - podSelector:
                matchExpressions:
                    - key: in_Segment__seg-6-7
                      operator: Exists
                    - key: in_Segment__seg_4-5
                      operator: DoesNotExist
    podSelector: {}
    policyTypes:
        - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: 'src: (segment seg-8) dst: (group != real-group) conn: All Connections'
        nsx-id: "2200"
    creationTimestamp: null
    name: policy-5
    namespace: default
spec:
    egress:
        - to:
            - podSelector:
                matchExpressions:
                    - key: group__real-group
                      operator: DoesNotExist
    podSelector:
        matchExpressions:
            - key: in_Segment__seg-8
              operator: Exists
    policyTypes:
        - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: 'src: (segment seg-8) dst: (IP addr is external) conn: All Connections'
        nsx-id: "2200"
    creationTimestamp: null
    name: policy-6
    namespace: default
spec:
    egress:
        - to:
            - ipBlock:
                cidr: 0.0.0.0/5
            - ipBlock:
                cidr: 8.0.0.0/7
            - ipBlock:
                cidr: 10.1.0.0/16
            - ipBlock:
                cidr: 10.2.0.0/15
            - ipBlock:
                cidr: 10.4.0.0/14
            - ipBlock:
                cidr: 10.8.0.0/13
            - ipBlock:
                cidr: 10.16.0.0/12
            - ipBlock:
                cidr: 10.32.0.0/11
            - ipBlock:
                cidr: 10.64.0.0/10
            - ipBlock:
                cidr: 10.128.0.0/10
            - ipBlock:
                cidr: 10.192.0.0/11
            - ipBlock:
                cidr: 10.224.0.0/12
            - ipBlock:
                cidr: 10.240.0.0/13
            - ipBlock:
                cidr: 10.248.0.0/15
            - ipBlock:
                cidr: 10.250.0.0/24
            - ipBlock:
                cidr: 10.250.1.2/31
            - ipBlock:
                cidr: 10.250.1.4/30
            - ipBlock:
                cidr: 10.250.1.8/29
            - ipBlock:
                cidr: 10.250.1.16/28
            - ipBlock:
                cidr: 10.250.1.32/27
            - ipBlock:
                cidr: 10.250.1.64/26
            - ipBlock:
                cidr: 10.250.1.128/25
            - ipBlock:
                cidr: 10.250.2.0/23
            - ipBlock:
                cidr: 10.250.4.0/22
            - ipBlock:
                cidr: 10.250.8.0/21
            - ipBlock:
                cidr: 10.250.16.0/20
            - ipBlock:
                cidr: 10.250.32.0/19
            - ipBlock:
                cidr: 10.250.64.0/18
            - ipBlock:
                cidr: 10.250.128.0/17
            - ipBlock:
                cidr: 10.251.0.0/16
            - ipBlock:
                cidr: 10.252.0.0/14
            - ipBlock:
                cidr: 11.0.0.0/8
            - ipBlock:
                cidr: 12.0.0.0/6
            - ipBlock:
                cidr: 16.0.0.0/4
            - ipBlock:
                cidr: 32.0.0.0/3
            - ipBlock:
                cidr: 64.0.0.0/2
            - ipBlock:
                cidr: 128.0.0.0/3
            - ipBlock:
                cidr: 160.0.0.0/5
            - ipBlock:
                cidr: 168.0.0.0/6
            - ipBlock:
                cidr: 172.0.0.0/12
            - ipBlock:
                cidr: 172.17.0.0/16
            - ipBlock:
                cidr: 172.18.0.0/15
            - ipBlock:
                cidr: 172.20.0.0/14
            - ipBlock:
                cidr: 172.24.0.0/13
            - ipBlock:
                cidr: 172.32.0.0/11
            - ipBlock:
                cidr: 172.64.0.0/10
            - ipBlock:
                cidr: 172.128.0.0/9
            - ipBlock:
                cidr: 173.0.0.0/8
            - ipBlock:
                cidr: 174.0.0.0/7
            - ipBlock:
                cidr: 176.0.0.0/4
            - ipBlock:
                cidr: 192.0.0.0/9
            - ipBlock:
                cidr: 192.128.0.0/11
            - ipBlock:
                cidr: 192.160.0.0/13
            - ipBlock:
                cidr: 192.169.0.0/16
            - ipBlock:
                cidr: 192.170.0.0/15
            - ipBlock:
                cidr: 192.172.0.0/14
            - ipBlock:
                cidr: 192.176.0.0/12
            - ipBlock:
                cidr: 192.192.0.0/10
            - ipBlock:
                cidr: 193.0.0.0/8
            - ipBlock:
                cidr: 194.0.0.0/7
            - ipBlock:
                cidr: 196.0.0.0/6
            - ipBlock:
                cidr: 200.0.0.0/5
            - ipBlock:
                cidr: 208.0.0.0/4
            - ipBlock:
                cidr: 224.0.0.0/3
    podSelector:
        matchExpressions:
            - key: in_Segment__seg-8
              operator: Exists
    policyTypes:
        - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: 'src: (segment seg-8) dst: (group != real-group) conn: All Connections'
        nsx-id: "2200"
    creationTimestamp: null
    name: policy-7
    namespace: default
spec:
    ingress:
        - from:
            - podSelector:
                matchExpressions:
                    - key: in_Segment__seg-8
                      operator: Exists
    podSelector:
        matchExpressions:
            - key: group__real-group
              operator: DoesNotExist
    policyTypes:
        - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: 'src: (segment seg-9-10) dst: (IP addr in 0.0.0.0/0) conn: All Connections'
        nsx-id: "3000"
    creationTimestamp: null
    name: policy-8
    namespace: default
spec:
    egress:
        - to:
            - ipBlock:
                cidr: 0.0.0.0/0
            - podSelector: {}
    podSelector:
        matchExpressions:
            - key: in_Segment__seg-9-10
              operator: Exists
    policyTypes:
        - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: 'src: (segment seg-9-10) dst: (IP addr in 0.0.0.0/0) conn: All Connections'
        nsx-id: "3000"
    creationTimestamp: null
    name: policy-9
    namespace: default
spec:
    ingress:
        - from:
            - podSelector:
                matchExpressions:
                    - key: in_Segment__seg-9-10
                      operator: Exists
    podSelector: {}
    policyTypes:
        - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: 'src: (group = real-group and not in segment seg_4-5 and not in segment seg-8) dst: (group = real-group) conn: All Connections'
        nsx-id: "4008"
    creationTimestamp: null
    name: policy-10
    namespace: default
spec:
    egress:
        - to:
            - podSelector:
                matchExpressions:
                    - key: group__real-group
                      operator: Exists
    podSelector:
        matchExpressions:
            - key: group__real-group
              operator: Exists
            - key: in_Segment__seg_4-5
              operator: DoesNotExist
            - key: in_Segment__seg-8
              operator: DoesNotExist
    policyTypes:
        - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: 'src: (group = real-group and not in segment seg_4-5 and not in segment seg-8) dst: (group = real-group) conn: All Connections'
        nsx-id: "4008"
    creationTimestamp: null
    name: policy-11
    namespace: default
spec:
    ingress:
        - from:
            - podSelector:
                matchExpressions:
                    - key: group__real-group
                      operator: Exists
                    - key: in_Segment__seg_4-5
                      operator: DoesNotExist
                    - key: in_Segment__seg-8
                      operator: DoesNotExist
    podSelector:
        matchExpressions:
            - key: group__real-group
              operator: Exists
    policyTypes:
        - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
    annotations:
        description: Default Deny Network Policy
        nsx-id: "1003"
    creationTimestamp: null
    name: default-deny
    namespace: default
spec:
    podSelector: {}
    policyTypes:
        - Ingress
        - Egress
