/*
Copyright 2023- IBM Inc. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package vsphrcoll

import (
	"crypto/tls"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"github.com/np-guard/vmware-analyzer/pkg/logging"
)

type serverData struct {
	server, userName, password string
	session                    string
}

func (s *serverData) getSession() error {
	if s.session != "" {
		return nil
	}
	return curlRequestSession(s)
}

func collectResource[A any](server *serverData, resourceQuery string, resource A) error {
	b, err := curlRequest(server, resourceQuery)
	if err != nil {
		return err
	}
	err = json.Unmarshal(b, resource)
	if err != nil {
		return err
	}
	return nil
}

func curlRequestSession(server *serverData) error {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	//nolint:gosec // need insecure TLS option for testing and development
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}

	//nolint:noctx // no context for testing and development
	req, err := http.NewRequest(http.MethodPost, server.server+"/api/session", http.NoBody)

	if err != nil {
		return err
	}
	auth := base64.StdEncoding.EncodeToString([]byte(fmt.Sprintf("%s:%s", server.userName, server.password)))
	fmt.Println(auth)

	req.Header.Set("Authorization", "Basic "+auth)
	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()
	if _, err := fmt.Fscanf(resp.Body, "%q", &server.session); err != nil {
		return err
	}
	return nil
}

func curlRequest(server *serverData, query string) ([]byte, error) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	//nolint:gosec // need insecure TLS option for testing and development
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}

	//nolint:noctx // no context for testing and development
	req, err := http.NewRequest(http.MethodGet, server.server+"/"+query, http.NoBody)
	logging.Infof("GET %s\n", query)
	if err != nil {
		return nil, err
	}

	if err := server.getSession(); err != nil {
		return nil, err
	}
	req.Header.Set("vmware-api-session-id", server.session)
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	b, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	return b, nil
}
