/*
Copyright 2023- IBM Inc. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package vsphere_collector

import (
	"crypto/tls"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"github.com/np-guard/vmware-analyzer/pkg/logging"
)


type serverData struct {
	server, userName, password string
	session string
}

func (s *serverData) getSession() string{
	if s.session != ""{
		return s.session
	}

	curlRequestSession(s)
	return s.session
}

func collectResultList[A json.Unmarshaler](server *serverData, resourceQuery string, resourceList *[]A) error {
	var totalRes []A
	for cursor := ""; totalRes == nil || cursor != ""; {
		currentQuery := resourceQuery
		if cursor != "" {
			currentQuery = fmt.Sprintf("%s?cursor=%s", resourceQuery, cursor)
		}
		b, err := curlRequest(server, currentQuery)
		if err != nil {
			return err
		}
		var currentRes []A
		currentRes, cursor, err = unmarshalResultsToList[A](b)
		if err != nil {
			return err
		}
		totalRes = append(currentRes, totalRes...)
	}
	*resourceList = totalRes
	return nil
}



func collectResource[A any](server *serverData, resourceQuery string, resource A) error {
	b, err := curlRequest(server, resourceQuery)
	if err != nil {
		return err
	}
	err = json.Unmarshal(b, resource)
	if err != nil {
		return err
	}
	return nil
}

func collectResources[A any](server *serverData, resourceQuery string, resource *[]A) error {
	b, err := curlRequest(server, resourceQuery)
	if err != nil {
		return err
	}
	err = json.Unmarshal(b, resource)
	if err != nil {
		return err
	}
	return nil
}


func curlRequestSession(server *serverData) error {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	//nolint:gosec // need insecure TLS option for testing and development
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}

	//nolint:noctx // no context for testing and development
	req, err := http.NewRequest(http.MethodPost, server.server+"/api/session", http.NoBody)

	if err != nil {
		return err
	}
	auth := base64.StdEncoding.EncodeToString([]byte(fmt.Sprintf("%s:%s",server.userName,server.password)))
    fmt.Println(auth)

	req.Header.Set("Authorization", "Basic " + auth)
	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()
	fmt.Fscanf(resp.Body,"%q", &server.session)

	return nil
}

func curlRequest(server *serverData, query string) ([]byte, error) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	//nolint:gosec // need insecure TLS option for testing and development
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}

	//nolint:noctx // no context for testing and development
	req, err := http.NewRequest(http.MethodGet, server.server+"/"+query, http.NoBody)
	logging.Infof("GET %s\n", query)
	if err != nil {
		return nil, err
	}
	req.Header.Set("vmware-api-session-id", server.getSession())
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	b, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	return b, nil
}



func unmarshalResultsToList[A any](b []byte) (res []A, cursor string, err error) {
	data := struct {
		Results *[]A
		Cursor  string
	}{}
	err = json.Unmarshal(b, &data)
	if err != nil {
		return nil, "", err
	}
	if data.Results == nil {
		return nil, "", getUnmarshalError(b)
	}
	return *data.Results, data.Cursor, nil
}

func getUnmarshalError(b []byte) error {
	errorData := struct {
		ErrorMessage string `json:"error_message"`
		ErrorCode    int    `json:"error_code"`
	}{}
	err := json.Unmarshal(b, &errorData)
	if err != nil {
		return err
	}
	if errorData.ErrorCode != 0 || errorData.ErrorMessage != "" {
		return fmt.Errorf("http error %d: %s", errorData.ErrorCode, errorData.ErrorMessage)
	}
	return fmt.Errorf("fail to unmarshal %s", b)
}
